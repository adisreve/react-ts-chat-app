{"version":3,"sources":["components/chat/ChatPanel.module.scss","components/theme/toggleSwitch.tsx","store/action/settingsActions.ts","store/types.ts","components/header/Header.tsx","store/action/socketActions.ts","components/chat/MessagePanel.tsx","components/chat/InputField.tsx","components/chat/ChatPanel.tsx","store/action/chatActions.ts","components/pages/Chat.tsx","components/pages/Settings.tsx","components/theme/globalStyle.tsx","App.tsx","store/reducers/chatReducer.ts","store/reducers/settingsReducer.ts","store/reducers/socketReducer.ts","store/reducers/index.ts","store/middleware/Socket.ts","store/middleware/socketMiddleware.ts","index.tsx","store/middleware/persistedStore.ts","components/pages/Settings.module.scss","components/theme/toggleSwitch.module.scss","components/header/Header.module.scss","components/chat/InputField.module.scss"],"names":["module","exports","getDefaultTheme","localStorage","getItem","ToggleSwitch","Props","useState","checked","setChecked","className","styles","outerSwitch","type","switch","id","defaultChecked","onClick","e","toggleTheme","htmlFor","switchLabel","toggle","getSettings","connect","state","messages","chat","notifications","settings","unread","connectSocket","props","messageArr","setMessageArr","notification","setNotification","location","useLocation","prev","value","ref","useRef","useEffect","current","usePrevious","connectToSockets","undefined","length","pathname","lastMsg","navbar","to","navbar__link","activeClassName","chatNotification","MessagePanel","date","clockFormat","moment","format","isCurrent","username","store","getState","bubbleContainer","chatPanel__messageBubble","paragraph","text","avatar","name","round","size","InputField","userName","onEnter","message","sendMessage","updateMessage","send","inputContainer","onChange","onKeyPress","ctrlKey","charCode","placeholder","socket","socketState","payload","messageText","setMessageText","scrollToBottom","chatPanelRef","myRef","behavior","elementOffset","offsetTop","scrollTo","top","chatPanelWrapper","chatPanel","map","i","key","position","user","inputStyles","Date","event","newMessage","currentTarget","Chat","setSettings","resetSettings","setUsername","clock","setClock","setOnEnter","formOuter","formWrapper","onSubmit","preventDefault","noValidate","formControl","checkboxWrapper","darkTheme","lightTheme","Global","createGlobalStyle","theme","mode","GlobalStyle","themes","App","setThemes","setItem","path","exact","component","Settings","initialState","connected","port","rootReducer","combineReducers","action","isError","EVENTS","Socket","onMessage","host","io","on","onConnected","emit","console","error","disconnect","close","this","socketMiddleware","isConnected","dispatch","connectionChanged","messageReceived","next","persistedState","serializedState","JSON","parse","err","loadState","middleware","thunk","createStore","composeWithDevTools","applyMiddleware","subscribe","stringify","log","saveState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9463891b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatPanelWrapper\":\"ChatPanel_chatPanelWrapper___8t2u\",\"chatPanel\":\"ChatPanel_chatPanel__1J74_\",\"bubbleContainer\":\"ChatPanel_bubbleContainer__1TSxV\",\"paragraph\":\"ChatPanel_paragraph__1PDNB\",\"chatPanel__avatar\":\"ChatPanel_chatPanel__avatar__2diuP\",\"right\":\"ChatPanel_right__2DdJN\",\"left\":\"ChatPanel_left__3-poo\",\"chatPanel__messageBubble\":\"ChatPanel_chatPanel__messageBubble__3L_cK\",\"date\":\"ChatPanel_date__1OmGF\",\"avatar\":\"ChatPanel_avatar__1HoMN\"};","import React, { useState } from 'react'\r\nimport styles from './toggleSwitch.module.scss';\r\n\r\ninterface ToggleProps {\r\n    toggleTheme: (event: React.MouseEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst getDefaultTheme = () => {\r\n    return localStorage.getItem('theme') === 'dark' ? true : false;\r\n }\r\n\r\nexport const ToggleSwitch = (Props: ToggleProps) => {\r\n    const [checked, setChecked] = useState(getDefaultTheme);\r\n\r\n    const handleClick = () => setChecked(!checked);\r\n\r\n    return (\r\n            <div className={styles.outerSwitch}>\r\n                <input type=\"checkbox\" className={`${styles.switch} active${checked}`} id=\"switch\" defaultChecked={checked} onClick={(e) => { handleClick(); Props.toggleTheme(e) }} /> \r\n                <label htmlFor=\"switch\" className={styles.switchLabel}>\r\n\r\n                    <div className={styles.toggle}></div>\r\n                </label>\r\n            </div>      \r\n    )\r\n}","import { GET_SETTINGS, SET_SETTINGS, RESET_SETTINGS, Settings } from '../types'\r\n\r\n// Setting user\r\nexport const setSettings = (settings: Settings) => ({\r\n    type: SET_SETTINGS,\r\n    payload: settings\r\n})\r\n\r\n// Define action to get user settings\r\nexport const getSettings = () => ({\r\n    type: GET_SETTINGS\r\n})\r\n\r\nexport const resetSettings = () => ({\r\n    type: RESET_SETTINGS\r\n})\r\n\r\n\r\n  \r\n","export interface Message {\r\n    user: string,\r\n    message: string,\r\n    position: string\r\n    date: Date\r\n}\r\n\r\nexport interface ChatState {\r\n    messages: Message[]\r\n}\r\n\r\nexport interface SocketState {\r\n    connected: boolean,\r\n    port: number\r\n    isError?: boolean\r\n}\r\n\r\nexport interface Settings {\r\n    username: string,\r\n    dark?: boolean,\r\n    clockFormat: '24h' | '12h',\r\n    onEnter: boolean,\r\n    current: boolean,\r\n    unread: number\r\n}\r\n\r\n// Declaring messages actions\r\nexport const SET_USER = \"SET_USER\";\r\nexport const GET_MESSAGES = \"GET_MESSAGES\";\r\nexport const SEND_MESSAGE = \"SEND_MESSAGE\";\r\nexport const SEND_MESSAGE_RESPONSE = \"SEND_MESSAGE_RESPONSE\";\r\nexport const MESSAGE_SENT = 'MESSAGE_SENT';\r\n\r\n// User settings actions\r\nexport const SET_SETTINGS = 'SET_SETTINGS';\r\nexport const GET_SETTINGS = 'GET_SETTINGS';\r\nexport const RESET_SETTINGS = 'RESET_SETTINGS';\r\n\r\n// Socket actions\r\nexport const CONNECTION_CHANGED = 'CONNECTION_CHANGED';\r\nexport const CONNECT_SOCKET = 'CONNECT_SOCKET';\r\n\r\ninterface GetMessages {\r\n    type: typeof GET_MESSAGES\r\n}\r\n\r\ninterface SendMessageAction {\r\n    type: typeof SEND_MESSAGE;\r\n    payload: Message;\r\n}\r\n\r\ninterface SendMessageResponse {\r\n    type: typeof SEND_MESSAGE_RESPONSE,\r\n    payload: Message;\r\n}\r\n\r\ninterface MessageSent {\r\n    type: typeof MESSAGE_SENT\r\n}\r\n\r\ninterface SetSettings {\r\n    type: typeof SET_SETTINGS,\r\n    payload: Settings\r\n}\r\n\r\ninterface GetSettings {\r\n    type: typeof GET_SETTINGS\r\n}\r\n\r\ninterface ResetSettings {\r\n    type: typeof RESET_SETTINGS\r\n}\r\n\r\n// Scoket Interfaces\r\ninterface ConnectionChanged {\r\n    type: typeof CONNECTION_CHANGED\r\n    connected: boolean,\r\n    isError: boolean\r\n}\r\n\r\ninterface ConnectSocket {\r\n    type: typeof CONNECT_SOCKET\r\n}\r\n\r\nexport type ChatActionTypes = GetMessages | SendMessageAction | SendMessageResponse | MessageSent;\r\nexport type SettingsActionTypes = GetSettings | SetSettings | ResetSettings;\r\nexport type SocketActionTypes = ConnectionChanged | ConnectSocket;","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { NavLink, useLocation } from 'react-router-dom';\r\n\r\n// Custom imports\r\nimport { ToggleSwitch } from \"../theme/toggleSwitch\";\r\n\r\n// Redux imports\r\nimport { connect } from \"react-redux\";\r\nimport { AppState } from \"../../store/reducers\";\r\nimport { getSettings } from '../../store/action/settingsActions';\r\nimport { connectSocket } from '../../store/action/socketActions';\r\n\r\n// Module scss\r\nimport styles from './Header.module.scss';\r\n\r\ninterface HeaderProps {\r\n    messages: any,\r\n    toggleTheme: (event: React.MouseEvent<HTMLInputElement>) => void,\r\n    notifications: number,\r\n    connectSocket: typeof connectSocket\r\n}\r\n\r\n\r\nexport const usePrevious = <T extends any>(value: T): T | undefined => {\r\n  const ref = useRef<T>();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n};\r\n\r\nconst Header: React.FC<HeaderProps> = props => {\r\n    const [messageArr, setMessageArr] = useState([])\r\n    const [notification, setNotification] = useState(0)\r\n    const location = useLocation()\r\n\r\n    const { messages } = props;\r\n    const prev = usePrevious(props);\r\n\r\n    useEffect(() => {\r\n        connectToSockets();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(prev !== undefined && prev?.messages.length !== messages.length && location.pathname !== '/chat') {\r\n            const lastMsg = messages[prev?.messages.length - 1];\r\n\r\n            setMessageArr((messageArr): any => [...messageArr, lastMsg])\r\n            setNotification(messageArr.length + 1);\r\n        }\r\n    }, [messages])\r\n\r\n    // Clear notifications on click\r\n    const clearNotifications = (): void => {\r\n        setMessageArr([]);\r\n        setNotification(0)\r\n    }\r\n\r\n    const connectToSockets = () => {\r\n        props.connectSocket();\r\n    }\r\n\r\n    return (\r\n        <div className={`header ${styles.navbar}`}>\r\n                <nav>\r\n                    <ul>\r\n                        <li>\r\n                            <NavLink to=\"/chat\" className={styles.navbar__link} activeClassName='active' onClick={(e) => { clearNotifications(); } }>Chat\r\n                                {notification > 0 ? ( \r\n                                    <span className={styles.chatNotification}>{notification}</span> )\r\n                                 : ''\r\n                                 }\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink to=\"/settings\" className={styles.navbar__link} activeClassName='active' >Settings</NavLink>\r\n                        </li>\r\n                    </ul>\r\n                    <ToggleSwitch toggleTheme={props.toggleTheme}/> \r\n                </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    messages: state.chat.messages,\r\n    notifications: state.settings.unread\r\n})\r\n\r\nexport default connect(mapStateToProps, { getSettings, connectSocket })(Header);\r\n","import { CONNECTION_CHANGED, CONNECT_SOCKET } from '../types';\n\nexport const connectionChanged = (isConnected: boolean) => {\n  return {\n    type: CONNECTION_CHANGED,\n    connected: isConnected,\n    isError: false\n  };\n};\n\nexport const connectSocket = () => {\n  return {\n    type: CONNECT_SOCKET\n  };\n};","import React from 'react'\r\nimport moment from \"moment\";\r\nimport Avatar from \"react-avatar\";\r\nimport Linkify from \"linkifyjs/react\";\r\nimport Emoji from \"react-emoji-render\";\r\n\r\n// Module SCSS\r\nimport styles from './ChatPanel.module.scss';\r\nimport { store } from '../..';\r\n\r\ninterface Props {\r\n    username: string,\r\n    position: string,\r\n    text: string,\r\n    date: Date,\r\n    clockFormat: '24h' | '12h'\r\n}\r\n\r\nexport const MessagePanel: React.FC<Props> = props => {\r\n    const date = props.clockFormat === '24h' ? moment(props.date).format('HH:mm') : moment(props.date).format('hh:mm A');\r\n    const isCurrent = props.username === store.getState().settings.username ? 'right' : 'left';\r\n\r\n    return (\r\n        <div className={`${styles.bubbleContainer} ${isCurrent}`}>\r\n\r\n            <div className={`${styles.chatPanel__messageBubble} ${styles[isCurrent]} chat-${isCurrent}`}>\r\n                <span className={`${styles.date} date_field`}>{date}</span>\r\n                <p className={styles.paragraph}><Linkify><Emoji text={props.text} /></Linkify></p>\r\n            </div>\r\n            <Avatar className={styles.avatar} name={props.username} round={true} size=\"45\"></Avatar>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { UpdateMessageParam } from './ChatPanel';\r\n\r\nimport styles from './InputField.module.scss';\r\n\r\ninterface InputProps {\r\n    message: string;\r\n    userName: string;\r\n    onEnter: boolean,\r\n    sendMessage: (message: string) => void;\r\n    updateMessage: (event: UpdateMessageParam) => void;\r\n}\r\n\r\nexport const InputField: React.FC<InputProps> = ({userName, onEnter, message, sendMessage, updateMessage}) => {\r\n    const keyPress = (e: React.KeyboardEvent<any>) => {\r\n        if(onEnter) {\r\n            if(e.ctrlKey && e.charCode === 13) send();\r\n        }\r\n    }\r\n\r\n    const send = () => {\r\n        if(message !== '') sendMessage(message);\r\n    }\r\n\r\n    return (\r\n        <>\r\n           <div className={styles.inputContainer}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={message}\r\n                    onChange={updateMessage}\r\n                    onKeyPress={keyPress}\r\n                    className=\"chat-input\"\r\n                    placeholder=\"Type a message...\"\r\n                />\r\n                <button onClick={send}>Send</button>\r\n            </div> \r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react'\r\n\r\n// Module scss\r\nimport styles from './ChatPanel.module.scss';\r\nimport inputStyles from './InputField.module.scss';\r\n\r\n// Component imports\r\nimport { MessagePanel } from './MessagePanel';\r\nimport { InputField } from './InputField';\r\n\r\n// Redux imports\r\nimport { connect } from \"react-redux\";\r\nimport { sendMessage } from \"../../store/action/chatActions\";\r\nimport { getSettings } from '../../store/action/settingsActions';\r\nimport { AppState } from \"../../store/reducers\";\r\nimport { Message, Settings } from '../../store/types';\r\n\r\ninterface MessageProps {\r\n    messages: Message[],\r\n    settings: Settings,\r\n    // getMessages: typeof getMesages,\r\n    sendMessage: typeof sendMessage\r\n}\r\n\r\nexport type UpdateMessageParam = React.SyntheticEvent<{ value: string }>;\r\n\r\nexport const isPageActive = (pageHash: string): boolean => window.location.hash.split('/')[1] === pageHash;\r\n  \r\nconst ChatPanel: React.FC<MessageProps> = (props) => {\r\n    const [messageText, setMessageText] = useState({ text: '' });\r\n\r\n    useEffect(() => {\r\n       scrollToBottom('auto');\r\n    }, [props]);\r\n\r\n    const chatPanelRef = useRef<HTMLInputElement>(null);\r\n    const myRef = useRef<HTMLInputElement>(null);\r\n\r\n    const scrollToBottom = (behavior: \"auto\" | \"smooth\" | undefined) => {\r\n        const elementOffset = myRef.current?.offsetTop ? myRef.current!.offsetTop : 0;\r\n\r\n        chatPanelRef.current?.scrollTo({ behavior: behavior, top: elementOffset})\r\n    }\r\n\r\n    const sendMessage = (message: string): void => {\r\n        props.sendMessage({\r\n            user: props.settings.username,\r\n            message,\r\n            date: new Date(),\r\n            position: 'right'\r\n        })\r\n\r\n        setMessageText({ text: '' });\r\n\r\n        scrollToBottom('smooth');\r\n    }\r\n\r\n    const updateMessage = (event: UpdateMessageParam) => {\r\n        let newMessage = { ...messageText }\r\n        \r\n        newMessage.text = event.currentTarget.value;\r\n        setMessageText({ text: newMessage.text })\r\n    };\r\n\r\n    const { messages } = props;\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.chatPanelWrapper}>\r\n                <div className={`chatPanel ${styles.chatPanel}`}  ref={chatPanelRef}>\r\n                    {messages.map((message,i) => (\r\n                        <MessagePanel key={i} position={message.position} text={message.message} date={message.date} clockFormat={props.settings.clockFormat} username={message.user}/>\r\n                    ))}\r\n                    <div ref={myRef}></div>\r\n                </div>\r\n            </div>\r\n            <div className={inputStyles.inputContainer}>\r\n                    <InputField message={messageText.text} userName={props.settings.username} onEnter={props.settings.onEnter} sendMessage={sendMessage} updateMessage={updateMessage}></InputField>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    messages: state.chat.messages,\r\n    settings: state.settings,\r\n    socket: state.socketState\r\n})\r\n\r\nexport default connect(mapStateToProps, { sendMessage, getSettings })(ChatPanel);","import { Message, GET_MESSAGES, SEND_MESSAGE, MESSAGE_SENT, SEND_MESSAGE_RESPONSE } from '../types'\r\n\r\nexport const messageReceived = (message: Message) => ({\r\n      type: SEND_MESSAGE_RESPONSE,\r\n      payload: message\r\n});\r\n\r\nexport const messageSent = () => ({\r\n    type: MESSAGE_SENT\r\n});\r\n\r\n// Define action for getting messages\r\n// export const getMesages = () => ({\r\n//     type: GET_MESSAGES\r\n// })\r\n\r\n// Define action for storing message \r\nexport const sendMessage = (message: Message ) => ({\r\n    type: SEND_MESSAGE,\r\n    payload: message\r\n})\r\n\r\n\r\n\r\n  \r\n","import React from 'react'\r\nimport ChatPanel from '../chat/ChatPanel'\r\n\r\nexport const Chat = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <ChatPanel />\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\n\r\nimport styles from './Settings.module.scss';\r\n\r\nimport { getSettings, setSettings, resetSettings } from '../../store/action/settingsActions';\r\nimport { Settings as Setting } from '../../store/types';\r\nimport { AppState } from '../../store/reducers';\r\nimport { connect } from 'react-redux';\r\n\r\ninterface SettingsProps {\r\n    settings: Setting,\r\n    getSettings: typeof getSettings,\r\n    setSettings: typeof setSettings,\r\n    resetSettings: typeof resetSettings\r\n}\r\n\r\ninterface Props {\r\n    clock: any\r\n}\r\n\r\nconst Settings: React.FC<SettingsProps> = (props) => {\r\n    const [username, setUsername] = useState(props.settings.username);\r\n    const [clock, setClock] = useState<Props>({ clock: props.settings.clockFormat }); // get Initial from localstorage\r\n    const [onEnter, setOnEnter] = useState(props.settings.onEnter);\r\n\r\n    useEffect(() => {\r\n        setUsername(props.settings.username);\r\n        setClock({ clock: props.settings.clockFormat });\r\n        setOnEnter(props.settings.onEnter);\r\n    }, [props.settings])\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\r\n        event.preventDefault();\r\n\r\n        props.setSettings({\r\n            username,\r\n            clockFormat: clock.clock,\r\n            onEnter,\r\n            current: true,\r\n            unread: 4\r\n        })\r\n    }\r\n\r\n    const reset = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\r\n        event.preventDefault();\r\n\r\n        props.resetSettings();\r\n    }\r\n\r\n    return (\r\n        <div className={`container ${styles.formOuter}`}>\r\n            <div className={styles.formWrapper}>\r\n                <h1>Settings</h1>\r\n                <form onSubmit={handleSubmit} className=\"form\" noValidate>\r\n                    <div className={styles.formControl}>\r\n                        <label htmlFor=\"username\">Username\r\n                            <input type=\"text\" name=\"username\" value={username} onChange={e => setUsername(e.currentTarget.value)}/>\r\n                        </label>\r\n                    </div>\r\n                    <div className={styles.formControl}>\r\n                        <label htmlFor=\"clock\">Clock Display\r\n                            <div className={styles.checkboxWrapper}>\r\n                                <input type=\"radio\" name=\"clock\" checked={clock.clock === '12h'} onChange={e => setClock({ clock: '12h' })}/><span>12h</span>\r\n                                <input type=\"radio\" name=\"clock\" checked={clock.clock === '24h'} onChange={e => setClock({ clock: '24h' })}/><span>24h</span>\r\n                            </div>\r\n                        </label>\r\n                    </div>\r\n                    <div className={styles.formControl}>\r\n                        <label htmlFor=\"sendOnEnter\">Send Messages on CTRL + Enter\r\n                            <div className={styles.checkboxWrapper}>\r\n                                <input type=\"radio\" name=\"sendOnEnter\" checked={onEnter} onChange={e => setOnEnter(true)}/><span>On</span>\r\n                                <input type=\"radio\" name=\"sendOnEnter\" checked={!onEnter} onChange={e => setOnEnter(false)}/><span>Off</span>\r\n                            </div>\r\n                        </label>\r\n                    </div>\r\n                    {/* <div className={styles.formControl}>\r\n                        <label htmlFor=\"username\">Language\r\n                            <input type=\"text\" name=\"username\" />\r\n                        </label>\r\n                    </div> */}\r\n                    <button type=\"submit\">SUBMIT</button>\r\n                    <button type=\"reset\" onClick={e => reset(e) }>RESET SETTINGS</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    settings: state.settings\r\n})\r\n\r\nexport default connect(mapStateToProps, { getSettings, setSettings, resetSettings })(Settings);\r\n\r\n\r\n","import React from \"react\";\r\nimport {createGlobalStyle} from \"styled-components\";\r\n\r\nconst darkTheme = {\r\n    backgroundColor: '#24252A',\r\n    headerBackground: '#131313',\r\n    fontColor: '#fefefe'\r\n}\r\n\r\nconst lightTheme = {\r\n    backgroundColor: '#fefefe',\r\n    headerBackground: '#fef2f3',\r\n    fontColor: '#24252A'\r\n}\r\n\r\nconst Global = createGlobalStyle`\r\n  body {\r\n    background-color: ${props => props.theme.mode === 'dark' ? darkTheme.backgroundColor : lightTheme.backgroundColor};\r\n    color: ${props => props.theme.mode === 'dark' ? darkTheme.fontColor : lightTheme.fontColor}\r\n  }\r\n\r\n  .header {\r\n    background-color: ${props => props.theme.mode === 'dark' ? darkTheme.headerBackground : lightTheme.headerBackground };\r\n    color: ${props => props.theme.mode === 'dark' ? darkTheme.fontColor : lightTheme.fontColor}\r\n  }\r\n\r\n  span.date_field {\r\n    color: ${props => props.theme.mode === 'dark' ? darkTheme.fontColor : lightTheme.fontColor}\r\n  }\r\n\r\n  input {\r\n    border-color: ${props => props.theme.mode === 'dark' ? darkTheme.fontColor : lightTheme.fontColor}\r\n  }\r\n\r\n  .header nav ul li a:hover {\r\n    background-color: ${props => props.theme.mode === 'dark' ? darkTheme.fontColor : lightTheme.fontColor};\r\n    color: ${props => props.theme.mode === 'light' ? darkTheme.fontColor : lightTheme.fontColor};\r\n  }\r\n\r\n  .header nav ul li a.active {\r\n    border-bottom:1px solid  ${props => props.theme.mode === 'dark' ? darkTheme.fontColor : lightTheme.fontColor};\r\n  }\r\n`\r\n\r\nexport const GlobalStyle: React.FC = () => {\r\n    return <Global />\r\n}","// External imports\nimport React, { useState } from 'react';\nimport { ThemeProvider, DefaultTheme } from 'styled-components';\nimport { Route, Switch } from 'react-router-dom';\n\n// Global sass import\nimport './styles/style.scss';\n\n// Local Imports\nimport Header from './components/header/Header';\nimport { Chat } from './components/pages/Chat';\nimport Settings from './components/pages/Settings';\nimport { GlobalStyle } from './components/theme/globalStyle';\n\nconst getDefaultTheme = () => {\n  return localStorage.getItem('theme') || 'light';\n}\n\nconst themes: DefaultTheme = {\n  mode: getDefaultTheme()\n}\n\nconst App: React.FC = () => {\n  const [theme, setThemes] = useState(themes);\n\n  const toggleTheme = () => {\n    if(theme.mode === 'dark') {\n      setThemes({ mode: 'light'})\n      localStorage.setItem('theme', 'light');\n    } else {\n      setThemes({ mode: 'dark'})\n      localStorage.setItem('theme', 'dark');\n    }\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n        <Header toggleTheme={toggleTheme} />\n        <Switch>\n          <Route path=\"/\" exact component={ Chat } />\n          <Route path=\"/settings\" component={ Settings } />\n          <Route path=\"/chat\" component={ Chat } />\n        </Switch>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { GET_MESSAGES, ChatState, SEND_MESSAGE, SEND_MESSAGE_RESPONSE, Message } from \"../types\"\r\n\r\nexport const initialState: ChatState = {\r\n    messages: [\r\n        {\r\n            user: 'J B',\r\n            message: 'Welcome to the chat room. Feel free to open a new (incognito 🕵️) browser window to chat with yourself',\r\n            position: 'right',\r\n            date: new Date()\r\n        },\r\n        {\r\n            user: 'James Bond',\r\n            message: 'You can hover on my avatar to reveal my secret identity :gun:',\r\n            position: 'right',\r\n            date: new Date()\r\n        }\r\n    ]\r\n}\r\n\r\nexport default function chatReducer(state = initialState, action: {username?: string, type: string, payload: Message}\r\n    ): ChatState {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE: \r\n            return {\r\n                ...state\r\n            }\r\n        case GET_MESSAGES: \r\n            return {\r\n                ...state\r\n            }\r\n        case SEND_MESSAGE_RESPONSE:\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, action.payload]\r\n            };\r\n        default: \r\n            return {\r\n                ...state\r\n            }\r\n    }\r\n}","import { Settings, SettingsActionTypes, GET_SETTINGS, SET_SETTINGS, RESET_SETTINGS } from \"../types\"\r\n\r\nexport const initialState: Settings = {\r\n    username: 'Adis',\r\n    clockFormat: '24h',\r\n    onEnter: true,\r\n    current: true,\r\n    unread: 5\r\n}\r\n\r\nexport default function settingsReducer(state = initialState, action: SettingsActionTypes\r\n    ): Settings {\r\n    switch (action.type) {\r\n        case GET_SETTINGS: \r\n            return {\r\n                ...state\r\n            }\r\n        case SET_SETTINGS: \r\n            return {\r\n                ...action.payload\r\n            }\r\n        case RESET_SETTINGS:\r\n            return initialState\r\n        default: \r\n            return {\r\n                ...state\r\n            }\r\n    }\r\n}","\nimport {  SocketActionTypes, SocketState, CONNECTION_CHANGED } from '../types';\n\nexport const initialState: SocketState = {\n  connected: false,\n  port: 3001\n};\n\nexport default function socketReducer(state = initialState, action: SocketActionTypes ): SocketState {\n  switch (action.type) {\n    case CONNECTION_CHANGED: \n      return {\n        ...state,\n        connected: action.connected,\n        isError: false\n      }\n    default: \n      return {\n        ...state\n      }\n  }\n}","import { combineReducers } from 'redux';\r\nimport chatReducer from './chatReducer';\r\nimport settingsReducer from './settingsReducer';\r\nimport socketReducer from './socketReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    chat: chatReducer,\r\n    settings: settingsReducer,\r\n    socketState: socketReducer \r\n})\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport default rootReducer;\r\n","import io from 'socket.io-client';\nimport { Message } from '../types';\n\nconst EVENTS = {\n  CONNECT: 'connect',\n  DISCONNECT: 'disconnect',\n  MESSAGE: 'message'\n};\n\nexport default class Socket {\n  public user: string;\n  public port: string;\n  private onChange: (isConnected: boolean) => void;\n  private onMessage: (message: Message) => void;\n  private socket: any;\n\n  constructor(onChange: (isConnected: boolean) => void, onMessage: (message: Message) => void) {\n    this.onChange = onChange;\n    this.onMessage = onMessage;\n    this.socket = '';\n    this.user = '';\n    this.port = '';\n  }\n\n  public connect = (user: string, port: string) => {\n    this.user = user;\n    this.port = port;\n\n    const host = `http://localhost:${port}`; // Running from local network\n    \n    this.socket = io.connect(host);\n    \n    this.socket.on(EVENTS.CONNECT, this.onConnected);\n  };\n\n  public onConnected = () => {\n    this.socket.on(EVENTS.MESSAGE, this.onMessage);\n    this.onChange(true);\n  };\n\n  public sendMessage = (message: Message) => {\n    if (typeof this.socket.emit === 'function') {\n      this.socket.emit(EVENTS.MESSAGE, message)\n    } else {\n      console.error('Cannot emit - socket.io disconnected.');\n    }\n  };\n\n  public disconnect = () => this.socket.close();\n}\n","import Socket from \"./Socket\";\nimport { connectionChanged } from \"../action/socketActions\";\nimport { messageReceived, messageSent } from \"../action/chatActions\";\nimport { SEND_MESSAGE, CONNECT_SOCKET, Message } from \"../types\";\n\nconst socketMiddleware = (store: any) => {\n\n  const onConnectionChange = (isConnected: boolean) => {\n    store.dispatch(connectionChanged(isConnected));\n  };\n\n  const onIncomingMessage = (message: Message) => store.dispatch(messageReceived(message));\n\n  const socket = new Socket(onConnectionChange, onIncomingMessage);\n\n  return (next: any) => (action: any) => {\n    const user = store.getState().settings.username;\n    const socketState = store.getState().socketState;\n\n    switch (action.type) {\n      case CONNECT_SOCKET:\n        socket.connect(user, socketState.port);\n        break;\n\n      case SEND_MESSAGE:\n        socket.sendMessage(action.payload);\n        store.dispatch(messageSent());\n        break;\n\n      default:\n        break;\n    }\n\n    return next(action)\n  };\n};\n\nexport default socketMiddleware;","// External imports\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\nimport {composeWithDevTools} from 'redux-devtools-extension';\n\n// Local imports\nimport App from './App';\nimport { loadState, saveState } from './store/middleware/persistedStore';\n\n// Redux\nimport rootReducer from './store/reducers';\nimport socketMiddleware from './store/middleware/socketMiddleware';\n\n// Load persisted state from storage\nconst persistedState = loadState();\nconst middleware = [thunk, socketMiddleware]\n\nexport const store = createStore(\n    rootReducer, \n    persistedState,\n    composeWithDevTools(applyMiddleware(...middleware)),\n);\n\nstore.subscribe(() => {\n    saveState({\n        settings: store.getState().settings\n    });\n})\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>, \n    document.getElementById('root')\n);\n","import { Message, Settings } from \"../types\";\r\n\r\ninterface State {\r\n    chat?: Message[],\r\n    settings: Settings\r\n}\r\n\r\nexport const loadState = (): any => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n\r\n        if(serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState)\r\n    } catch (err) {\r\n        return undefined\r\n    }\r\n}\r\n\r\nexport const saveState = (state: State) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formOuter\":\"Settings_formOuter__3oLA1\",\"formWrapper\":\"Settings_formWrapper__3gXS0\",\"formControl\":\"Settings_formControl__2SgaE\",\"checkboxWrapper\":\"Settings_checkboxWrapper__1DjvL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outerSwitch\":\"toggleSwitch_outerSwitch__191z3\",\"switch\":\"toggleSwitch_switch__o5w6M\",\"switchLabel\":\"toggleSwitch_switchLabel__1D6nD\",\"toggle\":\"toggleSwitch_toggle__3NQFC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Header_navbar__3_cAc\",\"navbar__link\":\"Header_navbar__link__XfTO2\",\"active\":\"Header_active__11sd3\",\"chatNotification\":\"Header_chatNotification__kCYB-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputContainer\":\"InputField_inputContainer__HGwLU\"};"],"sourceRoot":""}